from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import src.services.users_couples as ucdb
import src.services.users_db as udb
import src.buttons.buttons as btn
import src.dto.statements_user as sttsu

import logging
import uuid
from main import bot

def register_couple_handlers(dp: Dispatcher):
    @dp.message(Command("view_couple"))
    async def view_couple_users(msg: Message):
        user_id = msg.from_user.id
        couple = ucdb.check_couples(user_id)
        check_user = udb.check_user(user_id)
        if check_user == False:
            await msg.answer("–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - /start")
        else:
            match couple:
                case True:
                    select_user = udb.select_user(user_id)
                    for i in select_user:
                        await msg.reply(f'''
<b>–í–∞—à–∞ –ø–∞—Ä–∞:</b>
<pre>–ò–º—è: {i[3]}\ntelegram_id {i[1]}</pre>

–•–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø–∞—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ?)
        ''', reply_markup=btn.do_button_couple, parse_mode=ParseMode.HTML)
                case False:
                    await msg.reply("""
–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—ã üò≠
–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –ø–∞—Ä—ã?
    """, reply_markup=btn.create_couple_button)
                    
    @dp.callback_query(F.data == "initiate_couple")
    async def init_couple(callback: CallbackQuery, state: FSMContext):
        await state.set_state(sttsu.States.create_couple)
        await callback.message.answer("""
–û–∫–µ–π, –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—É! ü´°

<b>–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–∏–∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π):</b>

<pre>
1. –ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
2. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É - /view_id
3. –î–∞–ª–µ–µ, —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π id —Ç–µ–±–µ)
4. –í–Ω–æ—Å–∏—à—å id —Å—é–¥–∞ –∏ —Å–ª–µ–¥—É–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–∞–ª–µ–µ)))
</pre>
                            
–ê —Ç–µ–ø–µ—Ä—å - –≤–≤–µ–¥–∏—Ç–µ telegram_id —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É
""", parse_mode=ParseMode.HTML)
        
    @dp.message(sttsu.States.create_couple)
    async def set_couple(msg: Message, state: FSMContext):
        try:
            partner2 = msg.text
            partner1 = msg.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ partner2 - —ç—Ç–æ —á–∏—Å–ª–æ
            try:
                partner2 = int(partner2)
            except ValueError:
                await msg.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
                return
                
            check_user = udb.check_user(partner2)
            select_user = udb.select_user(partner1)
            
            if not select_user:
                await msg.reply("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
                
            if partner1 == partner2:
                await msg.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
            elif not check_user:
                await msg.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!")
            else:
                await state.update_data(partner2=partner2)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    ucdb.pending_status_couple(partner1, partner2)
                    logging.info("–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã - pending")
                    await bot.send_message(
                        chat_id=partner2,
                        text=f'''–° –≤–∞–º–∏ —Ö–æ—Ç—è—Ç —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É! 

<pre>
Login - {select_user[0][2]}
Name - {select_user[0][3]}
Telegram_id = {select_user[0][1]}
</pre>

(–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫—Ç–æ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É, –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å)''',
                        reply_markup=btn.approve_cookie_button,
                        parse_mode=ParseMode.HTML
                    )

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã: {e}")
                    await msg.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=btn.create_couple_button
                    )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ set_couple: {e}")
            await msg.answer(
                "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã(\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∑–∞–Ω–æ–≤–æ",
                reply_markup=btn.create_couple_button
            )
        finally:
            await state.clear()

    @dp.callback_query(F.data == "approve_couple")
    async def couple_accepted(callback: CallbackQuery):
        receiver_id = callback.from_user.id
        gen_uuid = str(uuid.uuid4())
        logging.info(f"–ë—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω uuid {gen_uuid} –¥–ª—è –ø–∞—Ä—ã")
        sender_id = ucdb.accepted_status_couple(receiver_id, gen_uuid)
        


        if sender_id:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
            await callback.message.answer("–ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üíñ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –¥—Ä—É–≥ –¥—Ä—É–≥—É!", reply_markup=btn.start_button)
            await bot.send_message(
                chat_id=sender_id,
                text="–£—Ä–∞! –í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –ø–∞—Ä—É ‚ù§Ô∏è –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!",
                reply_markup=btn.start_button
            )
        else:
            await callback.message.answer("–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã.")