from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import logging

import src.services.users_couples as ucdb
import src.services.food_list_db as fld
import src.buttons.buttons as btn

def register_dinner_handlers(dp: Dispatcher):
    @dp.callback_query(F.data == "dinner")
    async def choice_dinner(callback: CallbackQuery, state: FSMContext):
        try:
            user_id = callback.from_user.id
            get_uuid = ucdb.get_uuid(user_id)

            if get_uuid != False:
                dinner = fld.db_manager.select_dinner(get_uuid)
                
                if not dinner:
                    await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥ –Ω–∞ —É–∂–∏–Ω", reply_markup=btn.back_button)
                    return

                builder = InlineKeyboardBuilder()

                for name_dish in dinner:
                    builder.add(InlineKeyboardButton(
                        text = name_dish['name'],
                        callback_data = f"dtype_{name_dish['id']}"
                    ))
                    builder.adjust(3)

                await callback.message.answer("üç≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–∂–∏–Ω—ã:", reply_markup=builder.as_markup())

            elif get_uuid == False:
                await callback.message.answer('''–£–ø—Å... –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—ã (
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É - /view_couple''')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=btn.back_button)
        finally:
            fld.db_manager.close()

    @dp.callback_query(F.data.startswith("dtype_"))
    async def show_info_dinner(callback: CallbackQuery):
        try:
            fld.db_manager.connect_db()
            type_id = int(callback.data.split("_")[1])
            table = "food_dinner"
            dishes = fld.db_manager.one_dish_table(type_id, table)

            for item in dishes:
                dish_text = (
                    f"‚Ä¢ {item['name']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–ö–∞–ª–æ—Ä–∏–∏: {item.get('calories', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                )
                
                if item.get('image'):
                    try:
                        await callback.message.answer_photo(
                            item['image'],
                            caption=dish_text,
                            reply_markup=btn.change_button_dinner
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —É–∂–∏–Ω–∞: {e}")
                        await callback.message.answer(dish_text, reply_markup=btn.back_button_dinner)
                else:
                    await callback.message.answer(dish_text, reply_markup=btn.change_button_dinner)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ show_info_dinner: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–∂–∏–Ω–∞")
        finally:
            fld.db_manager.close()